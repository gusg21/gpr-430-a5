# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Debug]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            bin_path: Debug\a5.exe
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            bin_path: ./a5
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            bin_path: ./a5
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v3

    - name: submodules-init
      # You may pin to the exact commit or the version.
      # uses: snickerbockers/submodules-init@74927a8bb0fe1bb0f1f1e4d102384a8e69f19171
      uses: snickerbockers/submodules-init@v4
          
  #  - name: Checkout submodules
      # You may pin to the exact commit or the version.
      # uses: textbook/git-checkout-submodule-action@0cb23c7e6a67085e1dc5e884920bd620f7b9c469
    #  uses: textbook/git-checkout-submodule-action@2.1.1
    
    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Setup Python  
      uses: actions/setup-python@v5.0.0
      with:
        # Version range or exact version of Python or PyPy to use, using SemVer's version range syntax. Reads from .python-version if unset.
        python-version: '3.11'

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: background-action
      # You may pin to the exact commit or the version.
      # uses: JarvusInnovations/background-action@313d37130873d82c33fc907b9b78e932aec8e990
      uses: JarvusInnovations/background-action@v1.0.5
      with:
        # commands to run, supports multi-line commands (to background multiple processes, use & at the end of each line)
        run: ${{ matrix.bin_path }} &
        # the current working directory for the shell running the commands
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        # resources to wait on -- separated by commas or newlines, supported prefixes: [file,http,https,http-get,https-get,tcp,socket] (for advanced usage, pass a JSON serialized wait-on config)
        wait-on: tcp:127.0.0.1:20000
        # duration to wait for resources to be available (specify unit postfix, defaults to ms)
        # wait-for: # optional, default is 30s
        # tail log output while waiting on resources to be available [stderr,stdout,true,false]
        # tail: # optional, default is true
        # specify which logs (stdout,stderr) to output post-run (after the run has completed or failed) (stderr,stdout,true,false)
        # log-output: # optional, default is stdout,stderr
        # truncate tailed stderr/stdout output from post-run logs (i.e. deduplicate log output) [stderr,stdout,true,false]
        # log-output-resume: # optional
        # control if post-run logging occurs (timeout,early-exit,failure,true,false)
        # log-output-if: # optional, default is true
          
    - name: Test
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: python lab5_test_client.py
      timeout-minutes: 3
